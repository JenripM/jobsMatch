#!/usr/bin/env python3
"""
Script para limpiar la colecci√≥n legacy 'practicas_embeddings'.
Este script solo elimina esta colecci√≥n espec√≠fica sin tocar las dem√°s.
"""

import asyncio
from datetime import datetime
from db import db_jobs

def print_separator(title=""):
    """Imprime un separador visual"""
    if title:
        print(f"\n{'='*60}")
        print(f" {title}")
        print(f"{'='*60}")
    else:
        print(f"\n{'='*60}")

async def delete_collection_safely(collection_name):
    """
    Borra una colecci√≥n documento por documento para evitar "Transaction too big"
    
    Args:
        collection_name (str): Nombre de la colecci√≥n a borrar
        
    Returns:
        bool: True si se borr√≥ exitosamente, False en caso contrario
    """
    print(f"üóëÔ∏è  Borrando colecci√≥n '{collection_name}' documento por documento...")
    
    try:
        collection_ref = db_jobs.collection(collection_name)
        
        # Obtener todos los documentos
        docs = list(collection_ref.stream())
        
        if not docs:
            print(f"   ‚ÑπÔ∏è  La colecci√≥n '{collection_name}' ya est√° vac√≠a o no existe")
            return True
        
        print(f"   üìä Encontrados {len(docs)} documentos para borrar")
        print(f"   üêå Eliminando uno por uno (m√°s lento pero seguro)")
        
        total_deleted = 0
        
        for i, doc in enumerate(docs):
            try:
                # Eliminar documento individual
                doc.reference.delete()
                total_deleted += 1
                
                # Mostrar progreso cada 10 documentos
                if (i + 1) % 10 == 0:
                    print(f"   üìù Progreso: {i + 1}/{len(docs)} documentos eliminados")
                
                # Pausa m√≠nima entre eliminaciones
                await asyncio.sleep(0.1)
                
            except Exception as e:
                print(f"   ‚ö†Ô∏è  Error al eliminar documento {doc.id}: {e}")
                # Continuar con el siguiente documento
                continue
        
        print(f"   üéØ Total de documentos borrados: {total_deleted}")
        return True
        
    except Exception as e:
        print(f"   ‚ùå Error al borrar colecci√≥n '{collection_name}': {e}")
        return False

async def verify_collection_deleted(collection_name):
    """
    Verifica que una colecci√≥n haya sido eliminada completamente
    """
    try:
        collection_ref = db_jobs.collection(collection_name)
        docs = list(collection_ref.stream())
        
        if not docs:
            print(f"   ‚úÖ Verificaci√≥n exitosa: '{collection_name}' fue eliminada completamente")
            return True
        else:
            print(f"   ‚ùå Verificaci√≥n fallida: '{collection_name}' a√∫n tiene {len(docs)} documentos")
            return False
            
    except Exception as e:
        print(f"   ‚ùå Error al verificar '{collection_name}': {e}")
        return False

async def main():
    """Funci√≥n principal de limpieza"""
    print_separator("LIMPIEZA DE COLECCI√ìN LEGACY")
    print(f"‚è∞ Iniciado en: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("üéØ Objetivo: Eliminar solo 'practicas_embeddings' (colecci√≥n legacy)")
    
    # Confirmaci√≥n del usuario
    print("\nüîí ¬øEst√°s seguro de que quieres eliminar 'practicas_embeddings'?")
    print("   Esta colecci√≥n:")
    print("   - Es legacy (sin embeddings ni metadata)")
    print("   - Tiene 200 documentos")
    print("   - Ser√° eliminada PERMANENTEMENTE")
    
    response = input("\n   Escribe 'ELIMINAR' para proceder: ")
    
    if response != "ELIMINAR":
        print("‚ùå Operaci√≥n cancelada por el usuario")
        return
    
    print("\nüöÄ Iniciando limpieza...")
    
    # PASO 1: Verificar estado actual
    print("\nüîπ PASO 1: Verificando estado actual")
    print("-" * 50)
    
    try:
        collection_ref = db_jobs.collection("practicas_embeddings")
        docs = list(collection_ref.stream())
        
        if docs:
            print(f"   üìä 'practicas_embeddings' existe con {len(docs)} documentos")
            print(f"   üìù IDs de ejemplo: {[doc.id for doc in docs[:3]]}")
        else:
            print(f"   ‚ÑπÔ∏è  'practicas_embeddings' ya est√° vac√≠a o no existe")
            print("   ‚úÖ No hay nada que limpiar")
            return
            
    except Exception as e:
        print(f"   ‚ùå Error al verificar 'practicas_embeddings': {e}")
        return
    
    # PASO 2: Eliminar la colecci√≥n
    print("\nüîπ PASO 2: Eliminando 'practicas_embeddings'")
    print("-" * 50)
    
    success = await delete_collection_safely("practicas_embeddings")
    
    if not success:
        print("‚ùå La eliminaci√≥n fall√≥. Revisa los errores anteriores.")
        return
    
    # PASO 3: Verificaci√≥n
    print("\nüîπ PASO 3: Verificando eliminaci√≥n")
    print("-" * 50)
    
    verification_success = await verify_collection_deleted("practicas_embeddings")
    
    # Resumen final
    print_separator("RESUMEN DE LIMPIEZA")
    
    if verification_success:
        print("‚úÖ LIMPIEZA COMPLETADA EXITOSAMENTE")
        print("   - Colecci√≥n 'practicas_embeddings' eliminada completamente")
        print("   - 200 documentos legacy removidos")
        print("\nüéØ Pr√≥ximo paso: Regenerar embeddings en 'practicas'")
    else:
        print("‚ùå LA LIMPIEZA NO SE COMPLET√ì COMPLETAMENTE")
        print("   - Algunos documentos pueden haber quedado")
        print("   - Revisa manualmente en Firebase Console")
    
    print(f"\n‚è∞ Finalizado en: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n‚ùå Operaci√≥n interrumpida por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error inesperado: {e}")
        import traceback
        print(f"Stack trace: {traceback.format_exc()}")
